###Tutorial on how to plot a colorful barplot of your previously cleaned Whatsapp chatlog.###


#For the visualization you need to add the package "ggplot2" to your user library.
#this can be done with this function:
require("ggplot2")

#Most of the time it's easier to work with a dataframe
#if you name at least the important columns. For example like this:
colnames(data)[1:3] <- c("time", "name", "surname")
colnames(data)[1:3]

#Using the function 'strptime' you can now convert the first column
#containing the date and time into a 'Posixlt' object. From this date object you
#will easily be able to extract certain time aspects of the chat history
#- like specifically the hours or the months - later in this tutorial.
data$time <- strptime(data$time, "%d.%m.%Y %H:%M:%S")

#In some cases, depending on your chat history and if you're the group's admin,
#you will encounter an extra level 'Du' or 'You',
#if you call up the levels of your 'name' columns. You can remove it like this:
data <- data[data$name != "Du",]
#'!=' means 'not equal to', which in this case ignores all rows that contain the word 'Du'.
#the function 'droplevels' simply removes all levels which contain zero values.
data <- droplevels(data)

#Now that everything's in order, you can play around a little bit with the data.
#The easiest and most straightforward way is by using the function 'table':
table(data$name) #prints the count of messages each person sent
table(months(data$time)) #prints the message count for each month
table(sort(data$time$hour))
#prints the count for every hour, sorted from 0 (12 am) to 23 (11 pm)
table(data$name[which(data$time$hour < 1)])

#Since you already have put the package 'ggplot2' in your library by using the 'require' function,
#you can start visualizing your data. We have two examples prepared for you:
ggplot(data[data$time$hour < 6,], #this plots only the number of messages sent before 6 am
  aes(x = time$hour, fill = name)) + #this manipulates the aesthetics of your plot.
  #In this case it tells the function to put the hours of the column 'time' on the 'x' axis and
  #associate('fill') the bars with the different names
  stat_count(position = "dodge", show.legend = TRUE) + #this plots the bars next to each other.
    #You can also use the argument 'stack' instead, if you want to have them stacked
  #you don't necessarily need the following lines to plot something, 
  #but they add titles and labels to your plot and set the font of the title to be 'bold'
  ggtitle("Journocode conversations per hour") +
  ylab("# of messages") + xlab("hours of day") +
  theme(plot.title = element_text(lineheight = .8, face = "bold"))

#As you can see, with 'ggplot2' it is important that you don't connect
#the separate arguments of the function with ',' but with '+'

ggplot(data, aes(x = time$hour, fill = name)) +
  stat_count(position = "dodge", show.legend = TRUE) +
  ggtitle("Journocode conversations per hour") +
  ylab("# of messages") + xlab("time") +
  theme(plot.title = element_text(lineheight = .8, face = "bold"))
  
#Now feel free to play a little with this by yourself!
#Try changing the values for the x axis ('aes(x = ...)') or change the title for example.

#See the tutorial on pre-cleaning the log at www.journocode.com , "R project #1: Visualization of WhatsApp chat logs"
